#!/usr/bin/env python3
"""
Script d'initialisation pour les contributeurs au cours z√£ms python.
Ce script configure un nouvel environnement de d√©veloppement pour les contributeurs.
"""

import os
import sys
import subprocess
import platform
import argparse

# D√©finir les couleurs pour les messages (si le terminal supporte les couleurs)
if platform.system() == "Windows":
    # Windows n'a pas de support natif pour les couleurs ANSI
    try:
        import colorama
        colorama.init()
        USE_COLORS = True
    except ImportError:
        USE_COLORS = False
else:
    USE_COLORS = True

# D√©finir les codes de couleur
if USE_COLORS:
    GREEN = "\033[0;32m"
    BLUE = "\033[0;34m"
    RED = "\033[0;31m"
    YELLOW = "\033[0;33m"
    RESET = "\033[0m"
else:
    GREEN = BLUE = RED = YELLOW = RESET = ""

def print_colored(message, color):
    """Imprime un message color√©"""
    print(color + message + RESET)

def run_command(command, description=None, check=True):
    """Ex√©cute une commande shell et g√®re les erreurs"""
    if description:
        print_colored(f"üîÑ {description}...", BLUE)
    
    try:
        result = subprocess.run(command, shell=True, check=check, text=True, capture_output=True)
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print_colored(f"‚ùå Erreur: {e}", RED)
        if e.stdout:
            print(e.stdout)
        if e.stderr:
            print(e.stderr)
        return False

def setup_git():
    """Configure Git pour le projet"""
    print_colored("\n== Configuration de Git ==", BLUE)
    
    # V√©rifier si Git est install√©
    if not run_command("git --version", "V√©rification de la version de Git", check=False):
        print_colored("‚ùå Git n'est pas install√©. Veuillez l'installer depuis: https://git-scm.com/downloads", RED)
        return False
    
    # Configurer le nom et l'email si n√©cessaire
    git_user = subprocess.run("git config user.name", shell=True, capture_output=True, text=True).stdout.strip()
    git_email = subprocess.run("git config user.email", shell=True, capture_output=True, text=True).stdout.strip()
    
    if not git_user or not git_email:
        print_colored("‚ö†Ô∏è La configuration Git n'est pas compl√®te.", YELLOW)
        if not git_user:
            name = input("Entrez votre nom pour Git: ")
            run_command(f'git config --global user.name "{name}"')
        if not git_email:
            email = input("Entrez votre email pour Git: ")
            run_command(f'git config --global user.email "{email}"')
    
    print_colored("‚úÖ Git est correctement configur√©!", GREEN)
    return True

def setup_virtual_env():
    """Configure l'environnement virtuel Python"""
    print_colored("\n== Configuration de l'environnement virtuel ==", BLUE)
    
    # V√©rifier si virtual env existe d√©j√†
    if os.path.exists(".venv"):
        activate = input("‚ö†Ô∏è Un environnement virtuel existe d√©j√†. Voulez-vous le recr√©er? (o/n): ")
        if activate.lower() != 'o':
            print_colored("‚úÖ Utilisation de l'environnement virtuel existant.", GREEN)
            return True

    # Cr√©er l'environnement virtuel
    if platform.system() == "Windows":
        success = run_command("python -m venv .venv", "Cr√©ation de l'environnement virtuel")
    else:
        success = run_command("python3 -m venv .venv", "Cr√©ation de l'environnement virtuel")
    
    if not success:
        return False
    
    # Activer l'environnement virtuel et installer les d√©pendances
    if platform.system() == "Windows":
        print_colored("\n‚ö†Ô∏è Veuillez activer manuellement l'environnement virtuel avec:", YELLOW)
        print_colored("   .venv\\Scripts\\activate", BLUE)
        wait = input("Appuyez sur Entr√©e une fois l'environnement activ√©...")
    else:
        print_colored("\n‚ö†Ô∏è Veuillez activer manuellement l'environnement virtuel avec:", YELLOW)
        print_colored("   source .venv/bin/activate", BLUE)
        wait = input("Appuyez sur Entr√©e une fois l'environnement activ√©...")
    
    # Installer les d√©pendances
    success = run_command("pip install -r requirements.txt", "Installation des d√©pendances")
    
    if success:
        print_colored("‚úÖ Environnement virtuel configur√© et d√©pendances install√©es!", GREEN)
    
    return success

def fork_repo():
    """Guide pour forker le repo"""
    print_colored("\n== Fork du d√©p√¥t ==", BLUE)
    print_colored("Pour contribuer au projet, vous devez:", BLUE)
    print_colored("1. Forker le d√©p√¥t sur GitHub √† l'adresse:", BLUE)
    print_colored("   https://github.com/anyantudre/zams-python", YELLOW)
    print_colored("2. Cloner votre fork localement:", BLUE)
    print_colored("   git clone https://github.com/VOTRE_NOM_UTILISATEUR/zams-python", YELLOW)
    print_colored("3. Ajouter le d√©p√¥t upstream:", BLUE)
    print_colored("   git remote add upstream https://github.com/anyantudre/zams-python", YELLOW)
    
    repo_name = input("\nAvez-vous d√©j√† fork√© et clon√© le d√©p√¥t? (o/n): ")
    
    if repo_name.lower() == 'n':
        print_colored("\n‚ö†Ô∏è Veuillez forker et cloner le d√©p√¥t avant de continuer.", YELLOW)
        return False
    
    print_colored("‚úÖ Parfait! Continuons avec la configuration.", GREEN)
    return True

def setup_dev_tools():
    """Configure les outils de d√©veloppement"""
    print_colored("\n== Configuration des outils de d√©veloppement ==", BLUE)
    
    # Installer les outils de d√©veloppement suppl√©mentaires
    success = run_command("pip install black flake8 pytest jupyter", "Installation des outils de d√©veloppement")
    
    if success:
        print_colored("‚úÖ Outils de d√©veloppement install√©s!", GREEN)
    
    return success

def main():
    """Fonction principale"""
    print_colored("\n=== INITIALISATION POUR LES CONTRIBUTEURS DE Z√ÉMS PYTHON ===", BLUE)
    print_colored("Ce script va vous aider √† configurer votre environnement pour contribuer au cours.\n", BLUE)
    
    # V√©rifier si on est dans le bon r√©pertoire
    if not (os.path.exists("requirements.txt") and os.path.exists("README.md")):
        print_colored("‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis le r√©pertoire racine du projet.", RED)
        print_colored("   Assurez-vous d'√™tre dans le r√©pertoire contenant le fichier README.md", RED)
        return False
    
    steps = [
        fork_repo,
        setup_git,
        setup_virtual_env,
        setup_dev_tools,
    ]
    
    for step in steps:
        if not step():
            print_colored("\n‚ö†Ô∏è Configuration interrompue. Veuillez r√©soudre les probl√®mes ci-dessus et r√©essayer.", YELLOW)
            return False
    
    print_colored("\n‚úÖ CONFIGURATION TERMIN√âE AVEC SUCC√àS!", GREEN)
    print_colored("\nVous √™tes maintenant pr√™t √† contribuer au projet z√£ms python!", GREEN)
    print_colored("Pour commencer, cr√©ez une nouvelle branche pour votre contribution:", BLUE)
    print_colored("   git checkout -b ma-contribution", YELLOW)
    print_colored("\nBon codage! üöÄ", BLUE)
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 